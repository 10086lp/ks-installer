---

- import_tasks: init-namespaces.yaml


- name: Kubesphere | Getting common component installation files
  copy:
    src: "{{ item }}"
    dest: "{{ kubesphere_dir }}/"
  loop:
    - "common"
    - "ks-crds"


- name: KubeSphere | Create KubeSphere crds
  shell: "{{ bin_dir }}/kubectl create -f {{ kubesphere_dir }}/ks-crds/"
  register: import
  failed_when: "import.stderr and 'AlreadyExists' not in import.stderr"


- name: Kubesphere | Checking openpitrix common component
  shell: >
    {{ bin_dir }}/kubectl get pod -n openpitrix-system
  register: openpitrix_component_pod


- include_tasks: pv-migration.yaml
  loop:
    - {op: "openpitrix-db", ks: "mysql-pvc"}
    - {op: "openpitrix-etcd", ks: "etcd-pvc"}
    - {op: "openpitrix-minio", ks: "minio-pvc"}
  when:
    - openpitrix_component_pod.stdout.find("openpitrix-db-deployment") != -1


- name: Kubesphere | Getting PersistentVolumeName (mysql/etcd/minio)
  block:

    - name: Getting PersistentVolumeName (mysql)
      shell: >
        kubectl get pv | grep "mysql-pvc" | awk '{print $1}'
      register: pvName
    - name: Getting PersistentVolumeSize (mysql)
      shell: >
        kubectl get pv | grep "mysql-pvc" | awk '{print $2}'
      register: pvSize

    - name: Setting PersistentVolumeName (mysql)
      set_fact:
        db_pv_name: "{{ pvName.stdout }}"
    - name: Setting PersistentVolumeSize (mysql)
      set_fact:
        common:
          mysqlVolumeSize: "{{ pvSize.stdout }}"


    - name: Getting PersistentVolumeName (etcd)
      shell: >
        kubectl get pv | grep "etcd-pvc" | awk '{print $1}'
      register: pvName
    - name: Getting PersistentVolumeSize (etcd)
      shell: >
        kubectl get pv | grep "etcd-pvc" | awk '{print $2}'
      register: pvSize

    - name: Setting PersistentVolumeName (etcd)
      set_fact:
        etcd_pv_name: "{{ pvName.stdout }}"
    - name: Setting PersistentVolumeSize (etcd)
      set_fact:
        common:
          etcdVolumeSize: "{{ pvSize.stdout}}"


    - name: Getting PersistentVolumeName (minio)
      shell: >
        kubectl get pv | grep "minio-pvc" | awk '{print $1}'
      register: pvName
    - name: Getting PersistentVolumeSize (minio)
      shell: >
        kubectl get pv | grep "minio-pvc" | awk '{print $2}'
      register: pvSize

    - name: Setting PersistentVolumeName (minio)
      set_fact:
        minio_pv_name: "{{ pvName.stdout }}"
    - name: Setting PersistentVolumeSize (minio)
      set_fact:
        common:
          minioVolumeSize: "{{ pvSize.stdout }}"

  when:
    - openpitrix_component_pod.stdout.find("openpitrix-db-deployment") != -1


- name: Kubesphere | Creating common component manifests
  template:
    src: "{{ item.file }}.j2"
    dest: "{{ kubesphere_dir }}/common/{{ item.file }}"
  with_items:
    - { name: mysql, file: mysql.yaml }
    - { path: etcd, file: etcd.yaml }
    - { path: redis, file: redis.yaml }
    - { path: openldap, file: openldap.yaml }
    - { path: minio, file: minio.yaml }


- name: Kubesphere | Creating mysql sercet
  shell: >
    {{ bin_dir }}/kubectl create secret generic mysql-pass
    --from-file={{ kubesphere_dir }}/common/password.txt
    -n kubesphere-system
  register: import
  failed_when: "import.stderr and 'AlreadyExists' not in import.stderr"


- name: Kubesphere | Deploying mysql
  shell: >
    {{ bin_dir }}/kubectl -n kubesphere-system apply -f {{ kubesphere_dir }}/common/{{ item }}
  loop:
    - "redis.yaml"
    - "mysql.yaml"
    - "etcd.yaml"
    - "minio.yaml"
    - "openldap.yaml"
  register: import
  failed_when: "import.stderr and 'is immutable after creation except resources.requests for bound claims' not in import.stderr"

- name: check redis for check StroageClass
  shell: >
    {{ bin_dir }}/kubectl get pod -n kubesphere-system|grep redis|grep Running
  register: redis_and_storage_class_check
  retries: 20
  delay: 5
  ignore_errors: yes
  
- name: redis failed and how to solve
  fail:
     msg: "Please follow the steps below \n First: docker images|grep redis  \n second: kubectl get sc \n Third: k
ubectl get pvc -n kubesphere-system "
  when: "redis_and_storage_class_check.rc!=0"



- name: Kubesphere | Setting persistentVolumeReclaimPolicy (mysql/etcd/minio)
  block:

    - name: Setting persistentVolumeReclaimPolicy (mysql)
      shell: >
        kubectl patch pv $(kubectl get pv | grep "mysql-pvc" | awk '{print $1}')
        -p '{"spec":{"persistentVolumeReclaimPolicy": "Delete"}}'

    - name: Setting persistentVolumeReclaimPolicy (etcd)
      shell: >
        kubectl patch pv $(kubectl get pv | grep "etcd-pvc" | awk '{print $1}')
        -p '{"spec":{"persistentVolumeReclaimPolicy": "Delete"}}'

    - name: Setting persistentVolumeReclaimPolicy (minio)
      shell: >
        kubectl patch pv $(kubectl get pv | grep "minio-pvc" | awk '{print $1}')
        -p '{"spec":{"persistentVolumeReclaimPolicy": "Delete"}}'

  when:
    - openpitrix_component_pod.stdout.find("openpitrix-db-deployment") != -1