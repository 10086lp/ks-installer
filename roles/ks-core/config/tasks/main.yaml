---
- block:
  - name: KubeSphere | Getting sonarqube host
    shell: >
      {{ bin_dir }}/kubectl get cm -n kubesphere-system kubesphere-config -o jsonpath='{.data.kubesphere\.yaml}' | grep "sonarQube:" -A 2 | grep "host" | awk '{print $2}'
    register: sonarqube_host

  - name: KubeSphere | Getting sonarqube token
    shell: >
      {{ bin_dir }}/kubectl get cm -n kubesphere-system kubesphere-config -o jsonpath='{.data.kubesphere\.yaml}' | grep "sonarQube:" -A 2 | grep "token" | awk '{print $2}'
    register: sonarqube_token
  when:
    - devops.sonarqube is not defined

- set_fact:
    sonarQubeHost: "{{ sonarqube_host.stdout }}"
    sonarQubeToken: "{{ sonarqube_token.stdout }}"
  when: 
    - sonarqube_host is defined and sonarqube_host.stdout is defined and sonarqube_host.stdout != ""
    - sonarqube_token is defined and sonarqube_token.stdout is defined and sonarqube_token.stdout != ""

- set_fact:
    sonarQubeHost: "{{ devops.sonarqube.externalSonarUrl }}"
    sonarQubeToken: "{{ devops.sonarqube.externalSonarToken }}"
  when: 
    - devops.sonarqube is defined
    - devops.sonarqube.externalSonarUrl is defined
    - devops.sonarqube.externalSonarToken is defined

- block:
  - name: KubeSphere | Getting es host
    shell: >
      {{ bin_dir }}/kubectl get cm -n kubesphere-system kubesphere-config -o jsonpath='{.data.kubesphere\.yaml}' | grep "logging:" -A 2 | grep "host" | awk '{print $2}'
    register: es_host

  - name: KubeSphere | Getting es index prefix
    shell: >
      {{ bin_dir }}/kubectl get cm -n kubesphere-system kubesphere-config -o jsonpath='{.data.kubesphere\.yaml}' | grep "logging:" -A 2 | grep "indexPrefix" | awk '{print $2}'
    register: es_indexPrefix

- set_fact:
    esHost: "{{ es_host.stdout }}"
    esIndexPrefix: "{{ es_indexPrefix.stdout }}"
  when:
    - es_host is defined and es_host.stdout is defined and es_host.stdout != ""
    - es_indexPrefix is defined and es_indexPrefix.stdout is defined and es_indexPrefix.stdout != ""

- name: KubeSphere | Getting token
  shell: >
    {{ bin_dir }}/kubectl get secret kubesphere-secret -o jsonpath='{.data.token}' | base64 -d
  register: ks_token_str

- name: KubeSphere | Getting ks-secret
  shell: >
    {{ bin_dir }}/kubectl get secret kubesphere-secret -o jsonpath='{.data.secret}' | base64 -d
  register: ks_secret_str

- name: KubeSphere | Creating manifests
  template:
    src: "{{ item.file }}.j2"
    dest: "{{ kubesphere_dir }}/{{ item.file }}"
  with_items:
    - { name: kubesphere-config, file: kubesphere-config.yaml, type: cm }


- name: KubeSphere | Init KubeSphere
  shell: "{{ bin_dir }}/kubectl apply -f {{ kubesphere_dir }}/{{ item }}"
  loop:
    - "kubesphere-config.yaml"
  register: import
  failed_when: "import.stderr and 'AlreadyExists' not in import.stderr"

- import_tasks: ks-restart.yaml
