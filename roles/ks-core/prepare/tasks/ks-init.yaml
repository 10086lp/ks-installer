---
- name: Kubesphere | Checking kubesphere secrets
  shell: >
    {{ bin_dir }}/kubectl get secrets -n kubesphere-system
  register: kubesphere_secrets

- import_tasks: initToken.yaml
  when:
    - kubesphere_secrets.stdout.find("ks-components-token") == -1
    

- name: KubeSphere | Getting ks-components-token
  shell: >
    {{ bin_dir }}/kubectl get secret ks-components-token -o jsonpath='{.data.ks-token}' | base64 -d
  register: ks_token_str

- name: KubeSphere | Creating manifests
  template:
    src: "{{ item.file }}.j2"
    dest: "{{ kubesphere_dir }}/ks-init/{{ item.file }}"
  with_items:
    - { name: custom-values-istio-init, file: custom-values-istio-init.yaml, type: values }
    - { name: kubesphere-config, file: kubesphere-config.yaml, type: cm }


- name: Kubesphere | Checking account init
  shell: >
    {{ bin_dir }}/kubectl get users admin
  register: kubesphere_user_check
  failed_when: "kubesphere_user_check.stderr and 'NotFound' not in kubesphere_user_check.stderr"

- name: Kubesphere | Init account
  shell: >
    {{ bin_dir }}/kubectl apply -f {{ kubesphere_dir }}/ks-init/admin.yaml
  when:
    - kubesphere_user_check.stderr is defined
    - kubesphere_user_check.stderr.find("NotFound") != -1


- name: KubeSphere | Init KubeSphere
  shell: "{{ bin_dir }}/kubectl apply -f {{ kubesphere_dir }}/ks-init/{{ item }}"
  loop:
    - "iam-accounts.yaml"
    - "webhook-secret.yaml"
    - "kubesphere-config.yaml"
  register: import
  failed_when: "import.stderr and 'AlreadyExists' not in import.stderr"
